import feedparser
import time
import os
from datetime import datetime, timedelta
from urllib.parse import quote
from openai import AzureOpenAI
import re  # 👈 정규 표현식 사용을 위한 라이브러리 추가

# ================================
# 1. 사용자 설정
# ================================
user_selected_sources = ["조선일보", "한겨레", "중앙일보", "동아일보", "경향신문"]
user_follow_categories = ["정치", "경제"]

# ================================
# 2. 전체 뉴스/카테고리
# ================================
all_sources = [
    'MBC뉴스', '연합뉴스', '조선일보', '뉴스1', 'JTBC 뉴스',
    '중앙일보', 'SBS 뉴스', 'YTN', '한겨레', '경향신문',
    '오마이뉴스', '한국경제'
]

categories = {
    '정치': ['대통령실', '국회', '정당', '행정', '외교', '국방/북한'],
    '경제': ['금융/증권', '산업/재계', '중기/벤처', '부동산', '글로벌', '생활'],
}

MAX_ARTICLES_PER_CATEGORY = 100
save_path = 'D:/한국기술교육대학교/2025년 2학년 여름 계절/마이크로소프트 AI/텀프/output'
one_month_ago = datetime.now() - timedelta(days=30)
os.makedirs(save_path, exist_ok=True)

# ================================
# 3. Azure OpenAI 초기화
# ================================
endpoint = "https://newscheck2.openai.azure.com/"
deployment = "gpt-5-nano"
subscription_key = "Dsf5DmuTn1cS7lXaSxSTnO30kTZCqr2xKqIjLwvdovEGnQsz3NjlJQQJ99BHACHYHv6XJ3w3AAABACOGJk53"

client = AzureOpenAI(
    azure_endpoint=endpoint,
    api_key=subscription_key,
    api_version="2025-01-01-preview",
)

# ================================
# 4. 뉴스 수집 함수
# ================================
def fetch_news(sub_category, main_category):
    encoded_keyword = quote(sub_category)
    news_url = f"https://news.google.com/rss/search?q={encoded_keyword}&hl=ko&gl=KR"
    feed = feedparser.parse(news_url)

    articles = []
    saved_count = 0

    for entry in feed.entries:
        if saved_count >= MAX_ARTICLES_PER_CATEGORY:
            break

        source_name = getattr(entry, 'source', None)
        if source_name and source_name.title in all_sources:
            published_time = entry.get('published_parsed')
            if not published_time:
                continue
            article_date = datetime.fromtimestamp(time.mktime(published_time))
            if article_date < one_month_ago:
                continue

            articles.append({
                'title': entry.title,
                'link': entry.link,
                'source': source_name.title,
                'date': article_date.strftime('%Y-%m-%d %H:%M:%S'),
                'content': entry.title
            })
            saved_count += 1

    return articles

# ================================
# 5. GPT 평가 함수
# ================================
def gpt_evaluate(article_text, selected_sources):
    prompt_text = f"""
당신은 뉴스 요약 도우미입니다.
사용자가 선택한 언론사: {', '.join(selected_sources)}

아래 뉴스 제목 또는 본문을 기반으로:
1) 3줄로 요약
2) 선택한 언론사와 핵심 주장 비교
3) 신뢰도 등급 출력 (반드시 아래 형식만 사용):
    신뢰도: 높음 / 보통 / 낮음

신뢰도 평가 기준:
- 주요 언론사(조선일보, 한겨레, 중앙일보, 동아일보, 경향신문) → 높음
- 제목만 존재하거나 일부 정보만 있는 경우 → 보통
- 근거 부족/선정적/출처 불분명 → 낮음

⚠️ 출력 형식을 반드시 지켜주세요.
"""

    messages = [
        {"role": "system", "content": "너는 뉴스 요약과 언론사 비교, 신뢰도 평가만 간단히 출력하는 도우미야."},
        {"role": "user", "content": prompt_text},
        {"role": "user", "content": article_text}
    ]

    try:
        completion = client.chat.completions.create(
            model=deployment,
            messages=messages,
            max_completion_tokens=1024
        )
        result_text = completion.choices[0].message.content.strip()
        return result_text
    except Exception as e:
        return f"GPT 평가 오류: {e}"

# ================================
# 6. HTML 저장 함수 (수정)
# ================================
def save_news(main_category, sub_category, articles):
    main_path = os.path.join(save_path, main_category)
    os.makedirs(main_path, exist_ok=True)
    file_name = f"{sub_category.replace('/', '_')}_news.html"
    full_path = os.path.join(main_path, file_name)

    with open(full_path, 'w', encoding='utf-8') as f:
        f.write("<html><head><meta charset='utf-8'>")
        f.write("<style>")
        f.write("body { font-family: Arial, sans-serif; }")
        f.write("h1 { color: #2E86C1; }")
        f.write("h3 { margin-bottom: 0; }")
        f.write("p { margin-top: 5px; margin-bottom: 5px; }")
        f.write("hr { border: 1px solid #ccc; }")
        f.write(".summary { color: #4CAF50; }")
        f.write(".reliability { font-weight: bold; }")
        f.write(".high { color: #28a745; }")
        f.write(".medium { color: #ffc107; }")
        f.write(".low { color: #dc3545; }")
        f.write("</style></head><body>\n")

        f.write(f"<h1>{main_category} - {sub_category}</h1>\n")

        for article in articles:
            evaluation_text = article.get('evaluation', '')
            
            summary = ""
            reliability = ""
            
            # 정규 표현식을 사용해 요약과 신뢰도 등급 추출
            summary_match = re.search(r'1\)(.*?)(?=2\)|\Z)', evaluation_text, re.DOTALL)
            reliability_match = re.search(r'신뢰도:\s*(높음|보통|낮음)', evaluation_text)

            if summary_match:
                summary = summary_match.group(1).strip().replace("\n", "<br>")
            
            if reliability_match:
                reliability = reliability_match.group(1).strip()
            
            f.write(f"<h3><a href='{article['link']}' target='_blank'>{article['title']}</a></h3>\n")
            f.write(f"<p><b>언론사:</b> {article['source']} | <b>발행 시간:</b> {article['date']}</p>\n")
            
            # 요약 내용과 신뢰도 등급을 하나의 줄에 표시
            if summary:
                if "높음" in reliability:
                    reliability_class = "high"
                elif "보통" in reliability:
                    reliability_class = "medium"
                else:
                    reliability_class = "low"
                    
                f.write(f"<p class='summary'><b>3줄 요약:</b> {summary} <span class='reliability {reliability_class}'>신뢰도: {reliability}</span></p>\n")
            
            f.write("<hr>\n")

        f.write("</body></html>")

# ================================
# 7. 메인 실행 루프
# ================================
for main_category, sub_categories in categories.items():
    if main_category not in user_follow_categories:
        continue

    for sub_category in sub_categories:
        print(f"[{main_category}] {sub_category} 뉴스 수집 중...")
        articles = fetch_news(sub_category, main_category)

        for article in articles:
            article['evaluation'] = gpt_evaluate(article['content'], user_selected_sources)
            time.sleep(1)  # 서버 부담 방지

        save_news(main_category, sub_category, articles)
        print(f"  -> {len(articles)}개 뉴스 저장 완료")

print("\n🎉 모든 뉴스 수집 및 GPT 평가 완료!")
