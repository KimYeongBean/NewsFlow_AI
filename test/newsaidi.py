import feedparser
import time
import os
from datetime import datetime, timedelta
from urllib.parse import quote
from openai import AzureOpenAI
import re
import requests
import uuid
import json

# ================================
# 1. ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
# ================================
user_selected_sources = ["Ï°∞ÏÑ†ÏùºÎ≥¥", "ÌïúÍ≤®Î†à", "Ï§ëÏïôÏùºÎ≥¥", "ÎèôÏïÑÏùºÎ≥¥", "Í≤ΩÌñ•Ïã†Î¨∏"]
user_follow_categories = ["Ïó¨Ìñâ"]

# ================================
# 2. Azure AI ÏÑúÎπÑÏä§ ÏÑ§Ï†ï
# ================================
# --- Azure AI Î≤àÏó≠Í∏∞(Translator) ÏÑ§Ï†ï ---
translator_key = "5NuWjUHv52i3letxBdeZw1V46HADYfjoUdUc8aJqBm38uBSl16u4JQQJ99BHACNns7RXJ3w3AAAbACOG8bu6"
translator_endpoint = "https://api.cognitive.microsofttranslator.com/"
translator_location = "KoreaCentral"         # <-- üåè Ïã§Ï†ú Î≤àÏó≠Í∏∞ Î¶¨ÏÜåÏä§ ÏßÄÏó≠ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî (Ïòà: 'koreacentral')

# ================================
# 3. Azure OpenAI Ï¥àÍ∏∞Ìôî (ÏÇ¨Ïö©ÏûêÍ∞Ä Ï†úÍ≥µÌïú ÏµúÏã† Ï†ïÎ≥¥Î°ú ÏóÖÎç∞Ïù¥Ìä∏)
# ================================
endpoint = "https://newscheck2.openai.azure.com/"
deployment = "gpt-5-nano"
# Ï£ºÏùò: ÏïÑÎûò ÌÇ§Îäî Ïã§Ï†ú Ïú†Ìö®Ìïú Azure OpenAI API ÌÇ§Î°ú ÍµêÏ≤¥Ìï¥Ïïº Ìï©ÎãàÎã§.
subscription_key = "Dsf5DmuTn1cS7lXaSxSTnO30kTZCqr2xKqIjLwvdovEGnQsz3NjlJQQJ99BHACHYHv6XJ3w3AAABACOGJk53"

client = AzureOpenAI(
    azure_endpoint=endpoint,
    api_key=subscription_key,
    api_version="2025-01-01-preview",
)

# ================================
# 4. Ï†ÑÏ≤¥ Îâ¥Ïä§/Ïπ¥ÌÖåÍ≥†Î¶¨
# ================================
all_sources = [
    'MBCÎâ¥Ïä§', 'Ïó∞Ìï©Îâ¥Ïä§', 'Ï°∞ÏÑ†ÏùºÎ≥¥', 'Îâ¥Ïä§1', 'JTBC Îâ¥Ïä§',
    'Ï§ëÏïôÏùºÎ≥¥', 'SBS Îâ¥Ïä§', 'YTN', 'ÌïúÍ≤®Î†à', 'Í≤ΩÌñ•Ïã†Î¨∏',
    'Ïò§ÎßàÏù¥Îâ¥Ïä§', 'ÌïúÍµ≠Í≤ΩÏ†ú'
]
categories = {
    'Ï†ïÏπò': ['ÎåÄÌÜµÎ†πÏã§', 'Íµ≠Ìöå', 'Ï†ïÎãπ', 'ÌñâÏ†ï', 'Ïô∏Íµê', 'Íµ≠Î∞©/Î∂ÅÌïú'],
    'Í≤ΩÏ†ú': ['Í∏àÏúµ/Ï¶ùÍ∂å', 'ÏÇ∞ÏóÖ/Ïû¨Í≥Ñ', 'Ï§ëÍ∏∞/Î≤§Ï≤ò', 'Î∂ÄÎèôÏÇ∞', 'Í∏ÄÎ°úÎ≤å', 'ÏÉùÌôú'],
    'ÏÇ¨Ìöå': ['ÏÇ¨Í±¥ÏÇ¨Í≥†', 'ÍµêÏú°', 'ÎÖ∏Îèô', 'Ïñ∏Î°†', 'ÌôòÍ≤Ω', 'Ïù∏Í∂å/Î≥µÏßÄ', 'ÏãùÌíà/ÏùòÎ£å', 'ÏßÄÏó≠', 'Ïù∏Î¨º'],
    'IT_Í≥ºÌïô': ['Î™®Î∞îÏùº', 'Ïù∏ÌÑ∞ÎÑ∑/SNS', 'ÌÜµÏã†/Îâ¥ÎØ∏ÎîîÏñ¥', 'IT', 'Î≥¥Ïïà/Ìï¥ÌÇπ', 'Ïª¥Ìì®ÌÑ∞', 'Í≤åÏûÑ/Î¶¨Î∑∞', 'Í≥ºÌïô'],
    'ÏÉùÌôú_Î¨∏Ìôî': ['Í±¥Í∞ï', 'ÏûêÎèôÏ∞®', 'Ïó¨Ìñâ/Î†àÏ†Ä', 'ÏùåÏãù/ÎßõÏßë', 'Ìå®ÏÖò/Î∑∞Ìã∞', 'Í≥µÏó∞/Ï†ÑÏãú', 'Ï±Ö', 'Ï¢ÖÍµê', 'ÎÇ†Ïî®', 'ÏÉùÌôú'],
    'ÏÑ∏Í≥Ñ': ['ÏïÑÏãúÏïÑ/Ìò∏Ï£º', 'ÎØ∏Íµ≠/Ï§ëÎÇ®ÎØ∏', 'Ïú†ÎüΩ', 'Ï§ëÎèô/ÏïÑÌîÑÎ¶¨Ïπ¥', 'ÏÑ∏Í≥Ñ'],
    'Ïó¨Ìñâ': ['Íµ≠ÎÇ¥ Ïó¨Ìñâ']
}
MAX_ARTICLES_PER_CATEGORY = 100
save_path = 'C:/Users/admin/Desktop/news/test1/output'
one_month_ago = datetime.now() - timedelta(days=30)
os.makedirs(save_path, exist_ok=True)

# ================================
# 5. Îâ¥Ïä§ ÏàòÏßë Î∞è GPT ÌèâÍ∞Ä Ìï®Ïàò
# ================================
def fetch_news(sub_category):
    encoded_keyword = quote(sub_category)
    news_url = f"https://news.google.com/rss/search?q={encoded_keyword}&hl=ko&gl=KR"
    feed = feedparser.parse(news_url)
    articles = []
    for entry in feed.entries:
        if len(articles) >= MAX_ARTICLES_PER_CATEGORY: break
        source = getattr(entry, 'source', None)
        if source and source.title in all_sources:
            published_time = entry.get('published_parsed')
            if not published_time: continue
            article_date = datetime.fromtimestamp(time.mktime(published_time))
            if article_date < one_month_ago: continue
            articles.append({
                'title': entry.title,
                'link': entry.link,
                'source': source.title,
                'date': article_date.strftime('%Y-%m-%d %H:%M:%S'),
                'content': entry.title
            })
    return articles

def gpt_evaluate(article_text, selected_sources):
    prompt_text = f"""
ÎãπÏã†ÏùÄ Îâ¥Ïä§ ÏöîÏïΩ ÎèÑÏö∞ÎØ∏ÏûÖÎãàÎã§.
ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÑ†ÌÉùÌïú Ïñ∏Î°†ÏÇ¨: {', '.join(selected_sources)}

ÏïÑÎûò Îâ¥Ïä§ Ï†úÎ™© ÎòêÎäî Î≥∏Î¨∏ÏùÑ Í∏∞Î∞òÏúºÎ°ú:
1) 3Ï§ÑÎ°ú ÏöîÏïΩ
2) ÏÑ†ÌÉùÌïú Ïñ∏Î°†ÏÇ¨ÏôÄ ÌïµÏã¨ Ï£ºÏû• ÎπÑÍµê
3) Ïã†Î¢∞ÎèÑ Îì±Í∏â Ï∂úÎ†• (Î∞òÎìúÏãú ÏïÑÎûò ÌòïÏãùÎßå ÏÇ¨Ïö©):
    Ïã†Î¢∞ÎèÑ: ÎÜíÏùå / Î≥¥ÌÜµ / ÎÇÆÏùå

Ïã†Î¢∞ÎèÑ ÌèâÍ∞Ä Í∏∞Ï§Ä:
- Ï£ºÏöî Ïñ∏Î°†ÏÇ¨(Ï°∞ÏÑ†ÏùºÎ≥¥, ÌïúÍ≤®Î†à, Ï§ëÏïôÏùºÎ≥¥, ÎèôÏïÑÏùºÎ≥¥, Í≤ΩÌñ•Ïã†Î¨∏) ‚Üí ÎÜíÏùå
- Ï†úÎ™©Îßå Ï°¥Ïû¨ÌïòÍ±∞ÎÇò ÏùºÎ∂Ä Ï†ïÎ≥¥Îßå ÏûàÎäî Í≤ΩÏö∞ ‚Üí Î≥¥ÌÜµ
- Í∑ºÍ±∞ Î∂ÄÏ°±/ÏÑ†Ï†ïÏ†Å/Ï∂úÏ≤ò Î∂àÎ∂ÑÎ™Ö ‚Üí ÎÇÆÏùå

‚ö†Ô∏è Ï∂úÎ†• ÌòïÏãùÏùÑ Î∞òÎìúÏãú ÏßÄÏºúÏ£ºÏÑ∏Ïöî.
"""
    messages = [{"role": "system", "content": "ÎÑàÎäî Îâ¥Ïä§ ÏöîÏïΩÍ≥º Ïñ∏Î°†ÏÇ¨ ÎπÑÍµê, Ïã†Î¢∞ÎèÑ ÌèâÍ∞ÄÎßå Í∞ÑÎã®Ìûà Ï∂úÎ†•ÌïòÎäî ÎèÑÏö∞ÎØ∏Ïïº."}, {"role": "user", "content": prompt_text}, {"role": "user", "content": article_text}]
    try:
        completion = client.chat.completions.create(model=deployment, messages=messages, max_tokens=1024)
        return completion.choices[0].message.content.strip()
    except Exception as e:
        return f"GPT ÌèâÍ∞Ä Ïò§Î•ò: {e}"

# ================================
# 6. Azure Î≤àÏó≠ Ìï®Ïàò
# ================================
def translate_with_azure(text_to_translate, target_languages):
    headers = {
        'Ocp-Apim-Subscription-Key': translator_key,
        'Ocp-Apim-Subscription-Region': translator_location,
        'Content-type': 'application/json',
        'X-ClientTraceId': str(uuid.uuid4())
    }
    params = {
        'api-version': '3.0',
        'from': 'ko',
        'to': target_languages
    }
    body = [{'text': text_to_translate}]
    
    try:
        response = requests.post(f"{translator_endpoint}/translate", params=params, headers=headers, json=body)
        response.raise_for_status()
        translations = response.json()
        return {t['to']: t['text'] for t in translations[0]['translations']}
    except requests.exceptions.RequestException as e:
        print(f"Azure Î≤àÏó≠ API Ïò§Î•ò: {e}")
        return {lang: "Î≤àÏó≠ Ïò§Î•ò" for lang in target_languages}

# ================================
# 7. HTML Ï†ÄÏû• Ìï®Ïàò
# ================================
def save_news_with_translations(main_category, sub_category, articles):
    main_path = os.path.join(save_path, main_category)
    os.makedirs(main_path, exist_ok=True)
    file_name = f"{sub_category.replace('/', '_')}_news.html"
    full_path = os.path.join(main_path, file_name)

    with open(full_path, 'w', encoding='utf-8') as f:
        f.write("<html><head><meta charset='utf-8'><title>Îâ¥Ïä§ ÏöîÏïΩ</title>")
        f.write("""
        <style>
            body { font-family: 'Malgun Gothic', sans-serif; margin: 20px; line-height: 1.6; }
            .article-block { border-bottom: 1px solid #ddd; padding-bottom: 15px; margin-bottom: 15px; }
            .lang-buttons { margin-bottom: 10px; }
            .lang-buttons button { padding: 8px 12px; cursor: pointer; border: 1px solid #ccc; background-color: #f0f0f0; margin-right: 5px; border-radius: 5px; }
            .lang-buttons button.active { background-color: #3498db; color: white; border-color: #3498db; }
            .content-wrapper .content { display: none; }
            .content-wrapper .content.active { display: block; }
            .summary { background-color: #f8f9f9; border-left: 4px solid #3498db; padding: 10px; margin-top: 5px; }
            .reliability { font-weight: bold; padding: 3px 8px; border-radius: 5px; color: white; display: inline-block; margin-left: 10px; }
            .high { background-color: #2ecc71; } .medium { background-color: #f39c12; } .low { background-color: #e74c3c; }
        </style>
        </head><body>""")
        f.write(f"<h1>{main_category} - {sub_category} Îâ¥Ïä§</h1>")

        f.write('<div class="lang-buttons"><strong>Ï†ÑÏ≤¥ Ïñ∏Ïñ¥ Î≥ÄÍ≤Ω:</strong>')
        f.write('<button onclick="changeAllLanguages(\'ko\')" class="active">ÌïúÍµ≠Ïñ¥</button>')
        f.write('<button onclick="changeAllLanguages(\'en\')">English</button>')
        f.write('<button onclick="changeAllLanguages(\'ja\')">Êó•Êú¨Ë™û</button>')
        f.write('<button onclick="changeAllLanguages(\'zh-Hans\')">‰∏≠Êñá(ÁÆÄ‰Ωì)</button>')
        f.write('<button onclick="changeAllLanguages(\'fr\')">Fran√ßais</button>')
        f.write('</div><hr>')

        for i, article in enumerate(articles):
            f.write(f'<div class="article-block" id="article-{i}">')
            f.write(f"<p><b>Ïñ∏Î°†ÏÇ¨:</b> {article['source']} | <b>Î∞úÌñâ ÏãúÍ∞Ñ:</b> {article['date']}</p>")
            
            f.write('<div class="content-wrapper">')
            for lang, content in article['translations'].items():
                active_class = "active" if lang == 'ko' else ""
                
                if lang == 'ko':
                    title = content['title']
                    summary_html = content['summary_html']
                else:
                    title = content
                    summary_html = article['translations']['ko']['summary_html']

                f.write(f'<div class="content {lang} {active_class}">')
                f.write(f"<h3><a href='{article['link']}' target='_blank'>{title}</a></h3>")
                if summary_html:
                     f.write(summary_html)
                f.write('</div>')

            f.write('</div></div>')

        f.write('''
        <script type="text/javascript">
            function changeAllLanguages(lang) {
                document.querySelectorAll('.lang-buttons button').forEach(button => {
                    button.classList.remove('active');
                });
                document.querySelector(`.lang-buttons button[onclick="changeAllLanguages('${lang}')"]`).classList.add('active');
                document.querySelectorAll('.article-block').forEach(article => {
                    article.querySelectorAll('.content').forEach(contentDiv => {
                        contentDiv.classList.remove('active');
                    });
                    const targetContent = article.querySelector(`.content.${lang}`);
                    if (targetContent) {
                        targetContent.classList.add('active');
                    }
                });
            }
        </script>
        ''')
        f.write("</body></html>")

# ================================
# 8. Î©îÏù∏ Ïã§Ìñâ Î£®ÌîÑ
# ================================
target_languages = ['en', 'ja', 'fr', 'zh-Hans']

for main_category, sub_categories in categories.items():
    if main_category not in user_follow_categories:
        continue

    for sub_category in sub_categories:
        print(f"[{main_category}] {sub_category} Îâ¥Ïä§ ÏàòÏßë Ï§ë...")
        articles = fetch_news(sub_category)
        
        if not articles:
            print("  -> ÏàòÏßëÎêú Îâ¥Ïä§Í∞Ä ÏóÜÏäµÎãàÎã§.")
            continue
        
        processed_articles = []
        for article in articles:
            print(f"  - '{article['title'][:30]}...' GPT ÌèâÍ∞Ä Î∞è Î≤àÏó≠ Ï§ë...")
            
            evaluation_text = gpt_evaluate(article['content'], user_selected_sources)
            time.sleep(1)

            summary_match = re.search(r'1\)(.*?)(?=2\)|\Z)', evaluation_text, re.DOTALL)
            reliability_match = re.search(r'Ïã†Î¢∞ÎèÑ:\s*(ÎÜíÏùå|Î≥¥ÌÜµ|ÎÇÆÏùå)', evaluation_text)
            summary_text = summary_match.group(1).strip() if summary_match else "ÏöîÏïΩ Ï†ïÎ≥¥ ÏóÜÏùå"
            reliability = reliability_match.group(1).strip() if reliability_match else "Ïïå Ïàò ÏóÜÏùå"
            
            text_to_translate = f"{article['title']}\n{summary_text}"
            azure_translations = translate_with_azure(text_to_translate, target_languages)
            
            translated_titles = {}
            for lang, translated_full_text in azure_translations.items():
                parts = translated_full_text.split('\n', 1)
                translated_titles[lang] = parts[0]
            
            reliability_class = {"ÎÜíÏùå": "high", "Î≥¥ÌÜµ": "medium"}.get(reliability, "low")
            summary_html = f"<div class='summary'>{summary_text.replace('\n', '<br>')}<span class='reliability {reliability_class}'>Ïã†Î¢∞ÎèÑ: {reliability}</span></div>"

            article_data = {
                'link': article['link'],
                'source': article['source'],
                'date': article['date'],
                'translations': {
                    'ko': {'title': article['title'], 'summary_html': summary_html},
                    'en': translated_titles.get('en', "Î≤àÏó≠ Ïò§Î•ò"),
                    'ja': translated_titles.get('ja', "Î≤àÏó≠ Ïò§Î•ò"),
                    'fr': translated_titles.get('fr', "Î≤àÏó≠ Ïò§Î•ò"),
                    'zh-Hans': translated_titles.get('zh-Hans', "Î≤àÏó≠ Ïò§Î•ò")
                }
            }
            processed_articles.append(article_data)

        save_news_with_translations(main_category, sub_category, processed_articles)
        print(f"  -> {len(processed_articles)}Í∞ú Îâ¥Ïä§ Ï†ÄÏû• ÏôÑÎ£å.")

print("\nüéâ Î™®Îì† Îâ¥Ïä§ ÏàòÏßë, ÌèâÍ∞Ä Î∞è Î≤àÏó≠ ÏôÑÎ£å!")